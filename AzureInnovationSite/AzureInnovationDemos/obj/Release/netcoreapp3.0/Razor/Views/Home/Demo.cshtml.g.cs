#pragma checksum "D:\AzureInnovationDemos\AzureInnovationSite\AzureInnovationDemos\Views\Home\Demo.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "a055a2f1be80a05a4245cf955d66769f7b82c6c9"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Demo), @"mvc.1.0.view", @"/Views/Home/Demo.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\AzureInnovationDemos\AzureInnovationSite\AzureInnovationDemos\Views\_ViewImports.cshtml"
using AzureInnovationDemos;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\AzureInnovationDemos\AzureInnovationSite\AzureInnovationDemos\Views\_ViewImports.cshtml"
using AzureInnovationDemos.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a055a2f1be80a05a4245cf955d66769f7b82c6c9", @"/Views/Home/Demo.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"0e54656cb2cbf672eade78cb9b46fafd3270f915", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Demo : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/demo.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 2 "D:\AzureInnovationDemos\AzureInnovationSite\AzureInnovationDemos\Views\Home\Demo.cshtml"
  
    ViewBag.Title = "Demo";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"<div id=""demo"" v-cloak>
    <h2>{{demo.name}} </h2>
    <p>{{demo.abstract}}</p>
    <br />
    <div class=""demo-section"">
        <h4>Technologies:</h4> <span>{{demo.technologies}}</span>
        <br />
        <br />
        <div v-if=""demo.assets && demo.assets.length > 0"">
            <h4>Demo Assets:</h4>
            <ul class=""demo-resource-list"" v-if=""demo.assets"">
                <li v-for=""asset in demo.assets"" v-if=""asset.type.name == 'ClickThrough' || asset.type.name == 'LiveDemo'|| asset.type.name == 'Video' || asset.type.name == 'PrivateMD'"">
                    <span class=""resoure-item"">
                        <i v-if=""asset.type.name == 'ClickThrough'"" class=""fa fa-mouse-pointer""></i>
                        <i v-if=""asset.type.name == 'LiveDemo' || asset.type.name == 'PrivateMD'"" class=""fa fa-file-text-o""></i>
                        <i v-if=""asset.type.name == 'Video'"" class=""fa fa-video-camera""></i>
                        <a v-if=""asset.type.name == 'ClickThrough' || asset");
            WriteLiteral(@".type.name == 'LiveDemo'|| asset.type.name == 'Video'"" v-bind:href=""asset.value"" target=""_blank"" v-on:click=""gotAsset(asset)"">{{asset.name}}</a>
                        <a v-if=""asset.type.name == 'PrivateMD'"" v-bind:href=""'../guide/'+asset.alias"" target=""_blank"" v-on:click=""gotAsset(asset)"">{{asset.name}}</a>
                    </span>
                </li>
            </ul>
        </div>
    </div>
    <br />
    <div class=""demo-section"">
        <h4>Additional resources for live-code demo:</h4>
        <p>{{demo.additional}}</p>

        <div class=""validationg-demo-res"" v-if=""user.password && !demo.isSharedEnvironment && !demo.environment && validatingDemoResources"">
            <h4>
                <i class=""fa fa-hourglass-2""></i>
                <span class=""validationg-demo-res-el"">
                    Validating demo available resources
                </span>
            </h4>
        </div>
        <div class=""demo-access-validation"" v-if=""user.password && !demo.isSharedEnvir");
            WriteLiteral(@"onment && !demo.environment && !generatingDemo && availableDemos"">
            <h4>
                <i class=""fa fa-desktop""></i>
                There are {{availableDemosCount}} available environments for this demo
            </h4>
            <a v-on:click=""createEnvironment(demo.id)"">Get My Credentials</a>
        </div>
        <div class=""processing-demo-access"" v-if=""user.password && !demo.isSharedEnvironment && !demo.environment && generatingDemo"">{{provisioningDemoStatus}}</div>
        <div class=""no-demo-res"" v-if=""!availableDemos && nextAvailableDemoEnv!='' && !demo.isSharedEnvironment"">
            <br />
            <h4>
                <i class=""fa fa-clock-o""></i>We are sorry but there's not available demo environments at this time, the next availability will be at: {{nextAvailableDemoEnv}}
            </h4>
        </div>

        <div class=""demo-creds-list"" v-if=""demo.environment && !demo.isSharedEnvironment && demo.environment.environmentProvisioned"">

            <br />");
            WriteLiteral(@"

            <i class=""fa fa-user-circle-o""></i>
            <div class=""demo-creds"">
                <h4> Your demo user account: </h4>
                <span>
                    User:
                    <span>{{demo.environment.environmentUser}}</span>
                    <button class=""copy-text fa fa-copy"" v-bind:data-clipboard-text=""demo.environment.environmentUser"" title=""copy""></button>  <br />
                </span>
                <span>
                    Password:
                    <span>{{demo.environment.environmentPassword}}</span>
                    <button class=""copy-text fa fa-copy"" v-bind:data-clipboard-text=""demo.environment.environmentPassword"" title=""copy""></button><br />
                </span>

                <span v-if=""demo.environment.environmentURL"">
                    <a v-bind:href=""demo.environment.environmentURL"" target=""_blank"">{{demo.environment.environmentDescription}}</a>
                    <button class=""copy-text fa fa-copy"" v-bind:data-clipboar");
            WriteLiteral(@"d-text=""demo.environment.environmentURL"" title=""copy""></button>
                </span>
            </div>
            <div v-if=""demo.vm"">
                <br />
                <i class=""fa fa-cloud""></i>
                <div class=""demo-creds"">
                    <h4>Your virtual desktop session: </h4>
                    <span v-if=""demo.vm.url"">RDP Link<a v-bind:href=""'/api/demos/'+demo.id+'/rdp'""> click here to download</a></span>

                    <ul class=""demo-vm-tips"" v-if=""demo.vm.url"">
                        <li>
                            Use your demo user credentials to log in
                        </li>
                        <li>
                            Use the prefix 'azuread\' before your user name:<br /> &ensp;&ensp;azuread\{{demo.environment.environmentUser}}
                            <button class=""copy-text fa fa-copy"" v-bind:data-clipboard-text=""'azuread\\'+demo.environment.environmentUser"" title=""copy""></button>
                        </li>
         ");
            WriteLiteral(@"               <li>
                            Mac user? Download <a href=""https://apps.apple.com/us/app/microsoft-remote-desktop-10/id1295203466?mt=12"" target=""_blank""> Microsoft RDP client </a> first
                        </li>
                    </ul>
                </div>
            </div>
            <div class=""demo-access-resource-list"" v-if=""demo.assets"">
                <div v-for=""asset in demo.assets"">
                    <div class=""resoure-item"" v-if=""asset.type.name == 'AccessKeyToken' || asset.type.name == 'Link'"">
                        <i v-if=""asset.type.name == 'AccessKeyToken'"" class=""fa fa-key""></i>
                        <i v-if=""asset.type.name == 'Link'"" class=""fa fa-globe""></i>
                        <div class=""demo-creds"">
                            <h4>{{asset.name}}</h4>
                            <span v-if=""asset.type.name == 'AccessKeyToken'"">{{asset.value}}</span>
                            <a v-if=""asset.type.name == 'Link'"" v-bind:href=""asset.value""");
            WriteLiteral(@" target=""_blank"">{{asset.value}}</a>
                            <button class=""copy-text fa fa-copy"" v-bind:data-clipboard-text=""asset.value"" title=""copy""></button><br />
                        </div>
                        <br />  <br />
                    </div>
                    <div class=""resoure-item code"" v-if=""asset.type.name == 'Code'"">
                        <i class=""fa fa-code""></i>                        
                        <div class=""demo-creds"">
                            <h4>{{asset.name}}</h4>
                            <code v-bind:class=""'code' + asset.id"">{{asset.value}}</code>         
                            <span class=""code-actions"">
                                <button class=""fa fa-plus"" v-on:click=""toggleCode('code' + asset.id)""></button>
                                <button class=""copy-text fa fa-copy"" v-bind:data-clipboard-text=""asset.value"" title=""copy""></button><br />
                            </span>
                        </div>
      ");
            WriteLiteral(@"                  <br />  <br />
                    </div>
                </div>
            </div>
            <div class=""demo-access-expiration"" v-if=""demoExpirationDate != ''"">
                <i class=""fa fa-clock-o""></i>
                <div class=""demo-access-expiration-date"">
                    <h4>Your access to this demo environment will expire at:</h4>
                    <h4 class=""demo-access-expiration-value"">{{demoExpirationDate}}</h4>
                </div>
            </div>
        </div>
        <div class=""demo-creds-list"" v-if=""demo.environment && !demo.isSharedEnvironment && !demo.environment.environmentProvisioned"">
            <div class=""demo-access-expiration"">
                <i class=""fa fa-clock-o""></i>
                <div class=""demo-access-expiration-date"">
                    <h4>We are finishing setting things up.</h4>
                    <span>It can take maximum  10 minutes to complete this process</span>
                    <br />
                    ");
            WriteLiteral(@"<span class=""processing-demo-access"">Your environment will be ready soon.</span>
                </div>
            </div>
        </div>
        <br />
        <div class=""demo-creds-list"" v-if=""demo.sharedCredentials &&  demo.isSharedEnvironment"">
            <div v-for=""credentials in demo.sharedCredentials"">
                <i class=""fa fa-user-circle-o""></i>
                <div class=""demo-creds"">
                    <h4>Shared demo user account: </h4>
                    <span>
                        User:
                        <span>{{credentials.demoUser}}</span>
                        <button class=""copy-text fa fa-copy"" v-bind:data-clipboard-text=""credentials.demoUser"" title=""copy""></button>  <br />
                    </span>
                    <span>
                        Password:
                        <span>{{credentials.demoPassword}}</span>
                        <button class=""copy-text fa fa-copy"" v-bind:data-clipboard-text=""credentials.demoPassword"" title=""copy""");
            WriteLiteral(@"></button>  <br />
                    </span>
                    <span v-if=""credentials.demoURL"">
                        <a v-bind:href=""credentials.demoURL"" target=""_blank"">Go to Shared Demo</a>
                        <button class=""copy-text fa fa-copy"" v-bind:data-clipboard-text=""credentials.demoURL"" title=""copy""></button>
                    </span>
                </div>
            </div>
            <div class=""demo-access-resource-list"" v-if=""demo.assets"">
                <div v-for=""asset in demo.assets"">
                    <div class=""resoure-item"" v-if=""asset.type.name == 'AccessKeyToken'"">
                        <i class=""fa fa-key""></i>
                        <div class=""demo-creds"">
                            <h4>{{asset.name}}</h4>
                            <span>{{asset.value}}</span>
                            <button class=""copy-text fa fa-copy"" v-bind:data-clipboard-text=""asset.value"" title=""copy""></button><br />
                        </div>
                  ");
            WriteLiteral("  </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n</div>\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "a055a2f1be80a05a4245cf955d66769f7b82c6c914643", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
